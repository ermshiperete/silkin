/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * HelpStartUpPanel.java
 *
 * Created on Aug 14, 2010, 5:07:43 PM
 */



/**
 *
 * @author morris
 */
public class HelpStartUpPanel extends javax.swing.JPanel {

    /** Creates new form HelpStartUpPanel */
    public HelpStartUpPanel() {
        initComponents();
        jTextArea1.setSelectionStart(0);
        jTextArea1.setSelectionEnd(0);
        startupHelpCheckBox.setSelected(SIL_Edit.helpScreenOnStartUp);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        startupHelpCheckBox = new javax.swing.JCheckBox();

        setBackground(new java.awt.Color(255, 255, 204));
        setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        setPreferredSize(new java.awt.Dimension(907, 300));

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 18));
        jLabel1.setText("Getting Started with SIL Kinship Data Gathering");

        jScrollPane1.setViewportView(jTextArea1);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("You can view this information (& more) at any time via the Help menu.\n\nThe UPPER panel on the screen is for displaying information about \npersons and families in family tree charts drawn below. The LOWER\npanel is where you draw family tree charts (genealogies).\n\nTo begin a new project, click on the chart where you would like to draw \nthe first person. A menu will appear; choose a male, female or a \nmarriage (union). As soon as you make your choice, a pop-up box will\nappear asking the NAME OF YOUR PROJECT. Normally, if you are studying \nthe XYZ people you will name your project \"XYZ.\" All the files for your\nproject will be based on that name. For example, the file storing all your\ndata will be named \"XYZ.silk\". If you do not intend to keep this data,\nclick the \"Use Temp Name\" button. Your files will use the name \"Temp\".\n\nTo continue working on a project you previously started, choose \"File\"\nand \"Open\". A dialog box will ask you to pick the file holding your project.\nIt will have a file extension of \".silk\".\n\nAfter you have created one or more people, you can create marriages \n(unions). To place someone in a union, drag and drop (or \"pick and \nplop\") them onto it. If you drop them onto the TOP of a union, they are \nadded as a spouse. If you drop them onto the BOTTOM of a union, \nthey are added as children. As soon as they are added, a line appears \nlinking them to the union. \n\nIf you add someone to a union incorrectly, you can remove them by \n\"re-dropping\" them on the union. That is, drop them once to add them \nto the union; drop them a second time to remove them.\n\nIf you want to tidy up your chart, you can drag any person or union to \na new location with the mouse. If you run out of room on the screen, \nsimply scroll up, down, or sideways to get more room. Scroll bars will \nappear once your chart is larger than the viewing area. Whenever you \nplace a person or union right on the edge of the chart, it will auto-\nmatically add an empty space to allow room for one more. To force\nthe chart to grow, keep placing objects right on the edge. If you later\nmove a person or union away from the edge, the chart will NOT get\nsmaller.\n\nYou can make charts as large as you like. The bigger they are, the \nmore scrolling you must do to locate someone.\n\nWhenever you click on a person or union, the upper display panel will\ndisplay details about them. You should enter the name, birth date, etc.\nof a person in the appropriate text fields. A few fields are generated by\nthe system (e.g. a person's or union's ID number) and cannot be altered.\n\nThe person whose data is displayed is called \"Alter.\" In the upper right \nof the display is a box labeled \"Current Ego.\" The kinship term of reference \nthat Ego calls Alter is recorded in the first text field near the bottom of the \ndisplay. The reciprocal term that Alter calls Ego is recorded in the second \nfield. \n\nIn many cultures, the terms of reference and terms of address are the same.\nThe third and fourth fields hold the term of address and its reciprocal. By \ndefault these terms are the same, and the system fills them in. You cannot\nedit those fields ordinarily. However, if you check the menu item \"Distinct\nTerms of Address\" in the Context menu, then these fields will NOT be filled\nautomatically -- you must enter the terms of address manually. \n\nEach of these kin terms represents a \"dyad\" - the basic\ndata you need to learn a kinship system. As you create persons and \nunions and fill in the kin terms, the system is capturing the dyads for\nanalysis. The system is also capturing the genealogical data in the\nfamily tree charts. \n\nNOTE: When viewing the details about a union, the husband, wife and \nchildren are listed in text fields. You cannot edit these; the correct way\nto add or delete persons to a union is described above; you do it \ngraphically by dragging and dropping. \n");
        jScrollPane1.setViewportView(jTextArea1);

        startupHelpCheckBox.setText("Show This Help Screen on Start-Up");
        startupHelpCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startupHelpCheckBoxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(53, 53, 53)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(startupHelpCheckBox)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 505, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .addContainerGap(120, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 208, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(startupHelpCheckBox)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void startupHelpCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startupHelpCheckBoxActionPerformed
        if (startupHelpCheckBox.isSelected()) {
            SIL_Edit.helpScreenOnStartUp = true;
        }else {
            SIL_Edit.helpScreenOnStartUp = false;
        }
    }//GEN-LAST:event_startupHelpCheckBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JCheckBox startupHelpCheckBox;
    // End of variables declaration//GEN-END:variables

}
