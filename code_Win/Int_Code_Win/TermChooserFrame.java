import java.beans.PropertyVetoException;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JOptionPane;

/** This frame allows User to pick one or more kin terms to diagram in 
 * LibBrowser.
 *
 *  @author		Gary Morris, Northern Virginia Community College
 *                              garymorris2245@verizon.net
 */
public class TermChooserFrame extends KSJInternalFrame {
    
    static MyResBundle se = Library.screenElements;
    static String termName, title = se.getString("chooseKT2Diagram");
    LibBrowser parent;
    /**This field holds the terms User has chosen.
     * 
     */ ArrayList<LibBrowser.TermTriple> chosenTerms;
    Context ctxt;
    DomainTheory dt;
    boolean termLoad = false,
            clauseLoad = false,
            expLoad = false;
    KinTermDef currentKTD;
    ClauseBody currentOriginalHC, currentExpandedHC;

    /**
     * Creates new form TermChoserFrame
     */
    public TermChooserFrame(DomainTheory domTh, LibBrowser frame) {
        super(title);
        chosenTerms = new ArrayList<>();
        dt = domTh;
        ctxt = dt.ctxt;
        parent = frame;
        windowNum = title;
//        MainPane.openBrowsers.add(this);  
        initComponents();
        prepComponents();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }
    
    void prepComponents() {
        instructionLabel.setText(se.getString("instructionLabel"));
        addTermButton.setText(se.getString("addThisTerm"));
        doneButton.setText(se.getString("dONE"));
        deleteButton.setText(se.getString("delete"));
        termLoad = true;
        termPick.removeAllItems();  //  clear any items from Term menu
        int ctr = 0;
        Iterator termIter = dt.theory.keySet().iterator();
        while (termIter.hasNext()) { //  re-build term menu
            termPick.addItem(termIter.next());
            ctr++;
        }
        termLoad = false;
        if (ctr > 0) {
            termPick.setSelectedIndex(0);  //  make alphabetically-first term the selection
            try {
                ctxt.resetTo(0, 0);
            } catch (Exception exc) {
                // The section of code reached will not throw an exception.
            }
        }

    }

    /**This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        instructionLabel = new javax.swing.JLabel();
        termPick = new javax.swing.JComboBox();
        clausePick = new javax.swing.JComboBox();
        expPick = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        termListTextArea = new javax.swing.JTextArea();
        addTermButton = new javax.swing.JButton();
        doneButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        instructionLabel.setText("  Choose the kin term you want to diagram. Then pick which clause(s) and which expansion(s) to include.");

        termPick.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        termPick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                termPickActionPerformed(evt);
            }
        });

        clausePick.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        clausePick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clausePickActionPerformed(evt);
            }
        });

        expPick.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        expPick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expPickActionPerformed(evt);
            }
        });

        termListTextArea.setEditable(false);
        termListTextArea.setColumns(20);
        termListTextArea.setRows(5);
        jScrollPane1.setViewportView(termListTextArea);

        addTermButton.setLabel("Add This Kin Term");
        addTermButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTermButtonActionPerformed(evt);
            }
        });

        doneButton.setText("Done");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete A Term");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(doneButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addTermButton, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(termPick, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(clausePick, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addComponent(expPick, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(instructionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 673, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(instructionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(termPick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clausePick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(expPick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(addTermButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 78, Short.MAX_VALUE)
                        .addComponent(deleteButton)
                        .addGap(72, 72, 72)
                        .addComponent(doneButton))
                    .addComponent(jScrollPane1))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //  Action Performed methods generated by the GUI Builder are private and 
    //  cannot be modified or have JavaDoc comments.
    private void termPickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_termPickActionPerformed
        if (termLoad) {
            return;
        }
            termName = (String)termPick.getSelectedItem(); 
            currentKTD = (KinTermDef)dt.theory.get(termName);
			//  Create the 'Choose a Clause' menu items
            int nmbrCBs = currentKTD.definitions.size();
            ClauseBody cb;
            clauseLoad = true;
            clausePick.removeAllItems();  //  clear any items from Clause menu
            clausePick.addItem(se.getString("all"));
            for (int i=0; i < nmbrCBs; i++) {
                cb = (ClauseBody)currentKTD.definitions.get(i);
                clausePick.addItem(String.valueOf(i));
            }
            currentOriginalHC = null;
            //  Create the 'Choose an Expansion' menu items
            nmbrCBs = currentKTD.expandedDefs.size();
            expLoad = true;
            expPick.removeAllItems();  //  clear any items from Expansion menu
            expPick.addItem(se.getString("all")); 
            for (int i=0; i < nmbrCBs; i++) {
                cb = (ClauseBody)currentKTD.expandedDefs.get(i);
                expPick.addItem(String.valueOf(i));
            }
            currentExpandedHC = null;
            //  Make "All" the default selections for Clause & Expansion
            clausePick.setSelectedIndex(0); 
            clauseLoad = false;
            expPick.setSelectedIndex(0);
            expLoad = false;
    }//GEN-LAST:event_termPickActionPerformed

    private void clausePickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clausePickActionPerformed
        if (clauseLoad) {
            return;
        }
        String clauseNumString = (String) clausePick.getSelectedItem();
        if (clauseNumString.equals(se.getString("all"))) {
            currentOriginalHC = null;
        } else {  //  a-specific-clause-was-selected
            int clauseNmbr = Integer.parseInt(clauseNumString);
            currentOriginalHC = (ClauseBody) currentKTD.definitions.get(clauseNmbr);
        }  //  end of a-specific-clause-was-selected
        //  Re-build the 'Choose an Expansion' menu to show only expansions of 
        //  the selected original clause.  
        expLoad = true;
        String oldChoice = (String) expPick.getSelectedItem();
        expPick.removeAllItems();  //  clear any items from Expansion menu
        expPick.addItem(se.getString("all"));
        int nmbrCBs = currentKTD.expandedDefs.size();
        ClauseBody cb;
        for (int i = 0; i < nmbrCBs; i++) {
            cb = (ClauseBody) currentKTD.expandedDefs.get(i);
            if (cb.isExpansionOf(currentOriginalHC)) {
                expPick.addItem(String.valueOf(i));
            }            
        }  //  end of loop thru all expandedDefs
        //  If the current choice for an expansion is an expansion of the selected original clause, 
        //  then keep it.  Otherwise, change the choice to 'All' (which means "all expansions of the
        //  selected original clause").
        if ((currentExpandedHC == null) || 
                (!currentExpandedHC.isExpansionOf(currentOriginalHC))) {
                    //  Current choice is "All" or not an expansion of the selected original clause
            //  Ergo, must change choice to 'All'
            currentExpandedHC = null;
            expPick.setSelectedIndex(0);
        } else {  //  Current choice is an expansion of the selected original clause.  Keep it.
            expPick.setSelectedItem(oldChoice);            
        }
        expLoad = false;
    }//GEN-LAST:event_clausePickActionPerformed

    private void expPickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expPickActionPerformed
        if (expLoad) {
            return;
        }
        String expanseNumString = (String) expPick.getSelectedItem();
        if (! expanseNumString.equals(se.getString("all"))) {
            int clauseNmbr = Integer.parseInt(expanseNumString);
            currentExpandedHC = (ClauseBody) currentKTD.expandedDefs.get(clauseNmbr);
        }
        
    }//GEN-LAST:event_expPickActionPerformed

    private void addTermButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTermButtonActionPerformed
        // Whatever state the User has left the Pick-ers in, we compose a triple
        // and add it to the list of terms chosen
        int clauseNum, expNum;
        String clauseNumString = (String) clausePick.getSelectedItem();
        if (clauseNumString.equals(se.getString("all"))) {
            clauseNum = -1;
        }else{
            clauseNum = Integer.parseInt(clauseNumString);
        }
        String expanseNumString = (String) expPick.getSelectedItem();
        if (expanseNumString.equals(se.getString("all"))) {
            expNum = -1;
        }else {
            expNum = Integer.parseInt(expanseNumString);
        }
        chosenTerms.add(new LibBrowser.TermTriple(termName,clauseNum, expNum));
        String chosenList = "\t" + se.getString("termsSoFar") + "\n"; 
        for (LibBrowser.TermTriple trip : chosenTerms) {
            chosenList += trip.toString() + "\n";
        }
        termListTextArea.setText(chosenList);        
    }//GEN-LAST:event_addTermButtonActionPerformed

    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
        // The work is done. Quit.
        setVisible(false);
        parent.diagramTerms(chosenTerms);
        dispose();
        try {
        parent.setSelected(true);
        } catch (PropertyVetoException pv) {
        }  //  Won't happen.
    }//GEN-LAST:event_doneButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // Make a drop-down menu of the terms chosen so far, and delete choice.
        Object[] btns = new Object[chosenTerms.size()];
        for (int i = 0; i < chosenTerms.size(); i++) {
            btns[i] = chosenTerms.get(i).toString();
        }
        Object ch = JOptionPane.showInputDialog(parent,
                se.getString("chooseDeletion"),
                se.getString("termDeletion"),
                JOptionPane.PLAIN_MESSAGE,
                null, 
                btns, btns[0]);
        if (ch == null) {
            return;
        }
        LibBrowser.TermTriple victim = LibBrowser.TermTriple.readFromString((String)ch);
        for (LibBrowser.TermTriple trip : chosenTerms) {
            if (trip.equals(victim)) {
                chosenTerms.remove(trip);
                break;
            }
        }        
        String chosenList = se.getString("termsSoFar") + "\n";
        for (LibBrowser.TermTriple trip : chosenTerms) {
            chosenList += trip.toString() + "\n";
        }
        termListTextArea.setText(chosenList);
    }//GEN-LAST:event_deleteButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTermButton;
    private javax.swing.JComboBox clausePick;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton doneButton;
    private javax.swing.JComboBox expPick;
    private javax.swing.JLabel instructionLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea termListTextArea;
    private javax.swing.JComboBox termPick;
    // End of variables declaration//GEN-END:variables
}
