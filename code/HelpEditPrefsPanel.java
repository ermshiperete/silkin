/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * HelpEditPrefsPanel.java
 *
 * Created on Sep 15, 2011, 4:53:33 PM
 */
/**
 *
 * @author gary
 */
public class HelpEditPrefsPanel extends javax.swing.JPanel {

    public static final int IGNORE = 0, MAX = 1, SUB = 2, INDUCT = 3, POLY = 4;
    int ignoreStart, maxStart, subStart, inductStart, polyStart;
    int caretPosition = 0;
    
    /** Creates new form HelpEditPrefsPanel */
    public HelpEditPrefsPanel() {
        initComponents();
        plantCarrots();
        caretPosition = subStart;
        helpTextArea.setCaretPosition(caretPosition);
    }
    
    void plantCarrots() {
        String garden = helpTextArea.getText();
        ignoreStart = Math.abs(garden.indexOf("** Ignorable Percentage"));
        maxStart = Math.abs(garden.indexOf("** Max Percentage"));
        subStart = Math.abs(garden.indexOf("** Do Sub-Pattern Matches"));
        inductStart = Math.abs(garden.indexOf("** Do Pure Induction"));
        polyStart = Math.abs(garden.indexOf("** Polygamy"));        
    }
    
    public void setPosition(int pos) {
        if (pos == IGNORE) {
            caretPosition = ignoreStart;
        }else if (pos == MAX) {
            caretPosition = maxStart;
        }else if (pos == SUB) {
            caretPosition = subStart;
        }else if (pos == INDUCT) {
            caretPosition = inductStart;
        }else if (pos == POLY) {
            caretPosition = polyStart;
        }else {
            caretPosition = 0;
        }
        helpTextArea.setCaretPosition(caretPosition);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        helpTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 204));

        jScrollPane1.setViewportView(helpTextArea);

        helpTextArea.setColumns(20);
        helpTextArea.setRows(5);
        helpTextArea.setText("EDITING PREFERENCES for a particular context controls the LEARNING  \nMODULE (the part of SILKin that makes Suggestions). For more \ninformation about the Learning Module and how SILKin makes Suggestions, \nsee 'Help - Suggestions.'\n\nOnce you have set the preferences, they are saved in the SILK file and apply \nonly to that file. If you create a new context (i.e. a different language), you \nmust set the Preferences for it.\n\nYou can EXPERIMENT with these parameters. For example: after you gather \na fair number of dyads you click on \"Get New Suggestions\" and get just a\nfew proposed definitions for your kin terms. You wonder if you would have\ngotten more (or better) suggestions with different learning parameters. So\nyou change a few parameters and then click \"Get New Suggestions\" again.\nIf you like the results, you can leave the new parameter settings alone and\nwork with this set of Suggestions. If you don't like the result, you can put\nthe settings back where they were and click \"Get New Suggestions\" again.\nThis will recreate the original set of Suggestions.\n\n** Ignorable Percentage\nThis parameter controls how many dyads SILKin can ignore as \"probable errors\"\nwhen fitting your data to a definition found in the system Library. If you set\nthis to 5% (the default value), then if 95% of your data matches a Library pattern\nand 5% does not match, SILKin will suggest that this definition may be correct\nin your context. SILKin will not ask you to correct the 5% that don't match; it\njust ignores them.\n\nIf you set the Ignorable Percentage very low, then it will take a LOT of correct \ndyads to overcome just a few erroneous dyads. This will stop SILKin from\nmaking Suggestions until you have gathered a lot of dyads; this could waste\nyour efforts.\n\nIf you set the Ignorable Percentage very high, then SILKin might ignore a \nsubstantial number of dyads in proposing a definition. And those mis-fit\ndyads could be correctly indicating that the Library definition is not a good\nfit. SILKin could be too quick to make Suggestions. \n\n** Max Percentage\nThis parameter controls how quickly SILKin may suggest that some of your\ndyads are wrong and should be corrected. If you set this to 25% (the default\nvalue) SILKin will never assume that a group of dyads are wrong if they\nconstitute 25% or more of your data for that kin term. For example: if 80%\nof your data fits a Library pattern, the 20% misfits are too many to ignore.\nBut SILKin will consider pointing out the 20% and asking you to verify their\naccuracy. If you verify (confirm) a particular dyad as correct, SILKin will\nnever question it again (so be sure before you confirm).\n\nIf you set Max Percentage very low, then in the early stages of data \ngathering a few erroneous dyads could stop SILKin from proposing the \ncorrect definition; they will be too high a percentage of your data to be\nchallenged. This will slow down SILKin's search for a definition and slow\ndown the discovery of legitimate errors.\n\nIf you set Max Percentage very high, then it will be very quick to challenge\nyour dyads (even correct ones) based on partial matches to Library patterns.\nThis could waste your time confirming data that is correct.\n\n** Do Sub-Pattern Matches\nBy default, this parameter is set to 'false' (i.e. no check-mark). When you \nfirst begin gathering dyads, you are hoping that your data will match some \ndefinitions in the Library perfectly. If that happens, then it may be useful to \nread about the culture whose definition also fits your context. You may gain \ninsights about your own target culture (context) by comparing it to the \nLibrary context that contributed a definition.\n\nIf you have gathered a lot of dyads for a particular kin term and SILKin has \nnot found any matches for that kin term with Library definitions, then perhaps\nyour context has a unique pattern. But it is also possible that in your context\nthe definition of your kin term is a combination of some definitions that can\nbe found in the Library. (Perhaps your context has the concept of 'sibling' but\nthe Library only has patterns for 'brother' or 'sister.') \n\nWhen Sub-Pattern Matches is 'true' SILKin will try to 'piece together' a definition\nof your kin term using components of definitions in the Library. This is often\nsuccessful. BUT the pieced-together definition may be just what you need, or\nit may be a cumbersome monstrosity.\n\nYou should not check this box until you believe you have some unique kin \nterms in your context that do not match any definition in the Library. Of\ncourse, you can experiment with this parameter; see what happens if you\ncheck it and then \"Get New Suggestions.\" If you don't like what you get, \nun-check it and recreate the original Suggestions.\n\n** Do Pure Induction\nBy default, this parameter is set to 'false' (i.e. no check-mark). \nSometimes SILKin cannot find an exact match between the data in your context \nand a Library definition, and can't even piece one together using components \nof Library definitions. If this parameter is checked, SILKin will try one last\nstrategy: it will construct a definition from your data. This is a desperate\nmeasure, and often results in an unneccesarily complex definition. \n\nA definition produced by Pure Induction might be unusable by iteslf, but\ncould show you your data in a new form (i.e. Horn Clauses). That new\nview may give you some ideas or insights. \n\nGenerally you should not check this parameter until you have given up\non all the other learning strategies SILKin employs.\n\n** Polygamy\nA few Library definitions only work with multiple spouses (e.g. co-wife). If\nyou know that polygamy is recognized in your context, checking this \nparamenter can help SILKin look for suitable definitions. It will not restrict\nSILKin's search to ONLY polygamous definitions, but it will allow them.");
        jScrollPane1.setViewportView(helpTextArea);

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Editing Preferences");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 600, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(162, 162, 162)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 279, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea helpTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
